@using OrDragon.Models;
@model IEnumerable<OrDragon.Models.Question>
@{
    Questions questions = (Questions)HttpRuntime.Cache["questions"];
    OrDragon.Models.User user = (OrDragon.Models.User)Session["user"];
}

@{if (user != null) { 
    <p>
        <button type="button" class="btn btn-default" data-dismiss="modal" id="q-add">Ajouter</button>
    </p>
}}
<div>
    <table id="qtable" class="table table-hover">
        <tr>
            @*<th>
                Question
            </th>
            <th>
                Actions
            </th>*@
        </tr>

        @foreach (Question item in questions.GetList())
        {
            <tr id="q_@item.Id" data-difficulty="@item.Difficulty" class="active-question">
                <td>
                    <div class="col-md-4 col-box">@item.Text</div>
                    <div class="col-md-2 text-center col-box @{if (item.Answers[0].IsGood) {<text>alert-success</text>} else {<text>alert-danger</text>}}">@item.Answers[0].Text</div>
                    <div class="col-md-2 text-center col-box @{if (item.Answers[1].IsGood) {<text>alert-success</text>} else {<text>alert-danger</text>}}">@item.Answers[1].Text</div>
                    <div class="col-md-2 text-center col-box @{if (item.Answers[2].IsGood) {<text>alert-success</text>} else {<text>alert-danger</text>}}">@item.Answers[2].Text</div>
                    <div class="col-md-2 text-center col-box @{if (item.Answers[3].IsGood) {<text>alert-success</text>} else {<text>alert-danger</text>}}">@item.Answers[3].Text</div>
                </td>
            </tr>
        }

    </table>
</div>

<div class="modal fade" id="add-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form class="form" data-toggle="validator" role="form" method="post" accept-charset="UTF-8" id="create-nav">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Ajouter une question</h4>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <div id="add-message"></div>
                    <div class="form-group">
                        <label class="sr-only" for="exampleInputQuestion">Question : </label>
                        <input type="text" data-val="true" class="form-control" id="qtext" name="qtext" placeholder="Quelle est la pire marque de téléphone?" required>
                    </div>
                    <div class="form-group">
                        <table>

                            <tr>
                                <td class="col-md-8" style="width:98%">
                                    <input type="text" data-val="true" class="form-control" id="rep1" name="rep1" placeholder="Android" required>
                                </td>
                                <td><input type="radio" name="isGood" id="1" required /></td>
                            </tr>

                            <tr>
                                <td class="col-md-8">
                                    <input type="text" data-val="true" class="form-control" id="rep2" name="rep2" placeholder="Iphone" required>
                                </td>
                                <td><input type="radio" name="isGood" id="2" required /></td>
                            </tr>

                            <tr>
                                <td class="col-md-8">
                                    <input type="text" data-val="true" class="form-control" id="rep3" name="rep3" placeholder="Blackberry" required>
                                </td>
                                <td><input type="radio" name="isGood" id="3" required /></td>
                            </tr>

                            <tr>
                                <td class="col-md-8">
                                    <input type="text" data-val="true" class="form-control" id="rep4" name="rep4" placeholder="Windows phone" required>
                                </td>
                                <td><input type="radio" name="isGood" id="4" required /></td>
                            </tr>
                        </table>
                    </div>

                    <div class="form-group">

                        <div>
                            <input type="number" min="1" max="3" class="form-control" id="difficulty" name="difficulty" placeholder="1" required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" id="close-add">Fermer</button>
                    <button id="btn-create" type="submit" class="btn btn-primary">Ajouter</button>
                </div>
            </form>
        </div>
    </div>
</div>

<ul id="contextMenu" class="dropdown-menu" role="menu" style="display:none">
    <li><a tabindex="-1" href="#">Modifier</a></li>
    <li class="divider"></li>
    <li><a tabindex="-1" href="#">Supprimer</a></li>
</ul>

<style>
    .col-box {
        padding-top: 15px;
        padding-bottom: 15px;
        border: 1px solid #ddd;
        border: 1px solid rgba(86,61,124,.2);
    }

    .alert-success {
        background-image: -webkit-linear-gradient(top,#dff0d8 0,#c8e5bc 100%);
        background-image: -o-linear-gradient(top,#dff0d8 0,#c8e5bc 100%);
        background-image: -webkit-gradient(linear,left top,left bottom,from(#dff0d8),to(#c8e5bc));
        background-image: linear-gradient(to bottom,#dff0d8 0,#c8e5bc 100%);
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdff0d8', endColorstr='#ffc8e5bc', GradientType=0);
        background-repeat: repeat-x;
        border-color: #b2dba1;
    }

    .alert-danger {
    background-image: -webkit-linear-gradient(top,#f2dede 0,#e7c3c3 100%);
    background-image: -o-linear-gradient(top,#f2dede 0,#e7c3c3 100%);
    background-image: -webkit-gradient(linear,left top,left bottom,from(#f2dede),to(#e7c3c3));
    background-image: linear-gradient(to bottom,#f2dede 0,#e7c3c3 100%);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2dede', endColorstr='#ffe7c3c3', GradientType=0);
    background-repeat: repeat-x;
    border-color: #dca7a7;
}
}
</style>

<script>
    /* Code for right click menu */
    (function ($, window) {

        $.fn.contextMenu = function (settings) {

            return this.each(function () {

                // Open context menu
                $(this).on("contextmenu", function (e) {
                    // return native menu if pressing control
                    if (e.ctrlKey) return;

                    //open menu
                    var $menu = $(settings.menuSelector)
                        .data("invokedOn", $(e.target))
                        .show()
                        .css({
                            position: "absolute",
                            left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                            top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                        })
                        .off('click')
                        .on('click', 'a', function (e) {
                            $menu.hide();

                            var $invokedOn = $menu.data("invokedOn");
                            var $selectedMenu = $(e.target);

                            settings.menuSelected.call(this, $invokedOn, $selectedMenu);
                        });

                    return false;
                });

                // Open context menu
                $(this).click("contextmenu", function (e) {
                    // return native menu if pressing control
                    if (e.ctrlKey) return;

                    //open menu
                    var $menu = $(settings.menuSelector)
                        .data("invokedOn", $(e.target))
                        .show()
                        .css({
                            position: "absolute",
                            left: getMenuPosition(e.clientX, 'width', 'scrollLeft'),
                            top: getMenuPosition(e.clientY, 'height', 'scrollTop')
                        })
                        .off('click')
                        .on('click', 'a', function (e) {
                            $menu.hide();

                            var $invokedOn = $menu.data("invokedOn");
                            var $selectedMenu = $(e.target);

                            settings.menuSelected.call(this, $invokedOn, $selectedMenu);
                        });

                    return false;
                });

                //make sure menu closes on any click
                $('body').click(function () {
                    $(settings.menuSelector).hide();
                });
            });

            function getMenuPosition(mouse, direction, scrollDir) {
                var win = $(window)[direction](),
                    scroll = $(window)[scrollDir](),
                    menu = $(settings.menuSelector)[direction](),
                    position = mouse + scroll;

                // opening menu would pass the side of the page
                if (mouse + menu > win && menu < mouse)
                    position -= menu;

                return position;
            }

        };
    })(jQuery, window);

    function getQuestionId(text) {
        return text.replace('q_', '');
    }

    $("#qtable td").contextMenu({
        menuSelector: "#contextMenu",
        menuSelected: function (invokedOn, selectedMenu) {
            if (selectedMenu.text() == "Supprimer") {
                if(confirm("Êtes-vous certain de vouloir supprimer cette question?")) {
                    // Delete question
                    var data = {
                        "id": getQuestionId(invokedOn.closest('tr')[0].id)
                    };

                    $.ajax({
                        url: "/question/delete",
                        type: "POST",
                        data: JSON.stringify(data),
                        dataType: "json",
                        contentType: "application/json",
                        success: function (status) {
                            if (status.Success) {
                                invokedOn.closest('tr')[0].remove();
                            }
                            else {
                                alert(status.Message);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            $("#log-message").html(textStatus);
                        }
                    });
                }
            }
            /*
            var qtr = invokedOn.closest('tr');
            var msg = "You selected the menu item '" + selectedMenu.text() +
                "' on the value '" + invokedOn.text() + "'";
            var msg2 = "\ L'id de la question est : " + qtr[0].id;
            alert(msg + msg2);
            */
        }
    });
    /* End of right click menu */

    var running = false;
    $("#create-nav").submit(function (e) {
        e.preventDefault();
    });

    $(document).ready(function () {
        $(".active-question").hover(function () {
            $(this).css('cursor', 'pointer');
        });

        $("#q-add").click(function () {
            $('#add-modal').modal('show');
        });

        $("#close-add").click(function () {
            resetAddModal();
        });

        $("#btn-create").click(function () {
            if (running) return;
            if ($('input[type=radio][name=isGood]:checked').attr('id') == undefined) return;
            if ($("#difficulty").val() > 3 || $("#difficulty").val() < 1) return;
            $("#add-message").html("En cour..");
            $("#add-message").removeClass().addClass("alert alert-info");

            var data = {
                "qtext": $("#qtext").val(),
                "rep1": $("#rep1").val(),
                "rep2": $("#rep2").val(),
                "rep3": $("#rep3").val(),
                "rep4": $("#rep4").val(),
                "goodrep": $('input[type=radio][name=isGood]:checked').attr('id'),
                "difficulty": $("#difficulty").val()

            };

            running = true;
            $.ajax({
                url: "/question/create",
                type: "POST",
                data: JSON.stringify(data),
                dataType: "json",
                contentType: "application/json",
                success: function (status) {
                    if (status.Success)
                    {
                        $("#add-message").html(status.Message);
                        $("#add-message").removeClass().addClass("alert alert-success");
                        setTimeout('location.reload();', 750);
                    }
                    else
                    {
                        running = false;
                        $("#add-message").html(status.Message);
                        $("#add-message").removeClass().addClass("alert alert-danger");
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    running = false;
                    $("#add-message").html(textStatus);
                }
            });
        });
    });

    function resetAddModal() {
        $('#add-modal').modal('hide');
        $("#add-message").html("");
        $("#add-message").removeClass();

        $("#qtext").val('');
        $("#rep1").val('');
        $("#rep2").val('');
        $("#rep3").val('');
        $("#rep4").val('');
        $('input[type=radio][name=isGood]:checked').checked = false;
        $("#difficulty").val('');

        $(':input', '#create-nav')
          .removeAttr('checked')
          .removeAttr('selected')
          .not(':button, :submit, :reset, :hidden, :radio, :checkbox')
          .val('');

        running = false
    }
</script>
